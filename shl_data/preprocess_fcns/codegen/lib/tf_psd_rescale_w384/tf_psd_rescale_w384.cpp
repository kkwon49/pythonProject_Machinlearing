//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: tf_psd_rescale_w384.cpp
//
// MATLAB Coder version            : 3.3
// C/C++ source code generated on  : 25-Feb-2018 09:01:35
//

// Include Files
#include "rt_nonfinite.h"
#include "tf_psd_rescale_w384.h"

// Function Declarations
static void b_r2br_r2dit_trig(const creal_T x[1024], const double costab[513],
  const double sintab[513], creal_T y[1024]);
static void bluestein_setup(creal_T wwc[767]);
static void fft(const double x[384], creal_T y[384]);
static void filter(double b[4], double a[4], const double x[402], const double
                   zi[3], double y[402]);
static void filtfilt(const double x_in[384], double y_out[384]);
static double mean(const double x[384]);
static void power(const double a[384], double y[384]);
static void r2br_r2dit_trig(const creal_T x[767], const double costab[513],
  const double sintab[513], creal_T y[1024]);
static void r2br_r2dit_trig_impl(const creal_T x[384], int xoffInit, const
  double costab[513], const double sintab[513], creal_T y[1024]);
static void repmat(const double a[384], double b[384]);
static void rescale_minmax(const double X[192], double Y[192]);
static double sum(const double x[384]);
static void tf_welch_psd(const double signals[384], double fs, const double
  window[384], double CSM[192]);

// Function Definitions

//
// Arguments    : const creal_T x[1024]
//                const double costab[513]
//                const double sintab[513]
//                creal_T y[1024]
// Return Type  : void
//
static void b_r2br_r2dit_trig(const creal_T x[1024], const double costab[513],
  const double sintab[513], creal_T y[1024])
{
  int ix;
  int ju;
  int iy;
  int i;
  boolean_T tst;
  double temp_re;
  double temp_im;
  int iheight;
  int istart;
  int j;
  double twid_re;
  double twid_im;
  int ihi;
  ix = 0;
  ju = 0;
  iy = 0;
  for (i = 0; i < 1023; i++) {
    y[iy] = x[ix];
    iy = 1024;
    tst = true;
    while (tst) {
      iy >>= 1;
      ju ^= iy;
      tst = ((ju & iy) == 0);
    }

    iy = ju;
    ix++;
  }

  y[iy] = x[ix];
  for (i = 0; i <= 1023; i += 2) {
    temp_re = y[i + 1].re;
    temp_im = y[i + 1].im;
    y[i + 1].re = y[i].re - y[i + 1].re;
    y[i + 1].im = y[i].im - y[i + 1].im;
    y[i].re += temp_re;
    y[i].im += temp_im;
  }

  iy = 2;
  ix = 4;
  ju = 256;
  iheight = 1021;
  while (ju > 0) {
    for (i = 0; i < iheight; i += ix) {
      temp_re = y[i + iy].re;
      temp_im = y[i + iy].im;
      y[i + iy].re = y[i].re - temp_re;
      y[i + iy].im = y[i].im - temp_im;
      y[i].re += temp_re;
      y[i].im += temp_im;
    }

    istart = 1;
    for (j = ju; j < 512; j += ju) {
      twid_re = costab[j];
      twid_im = sintab[j];
      i = istart;
      ihi = istart + iheight;
      while (i < ihi) {
        temp_re = twid_re * y[i + iy].re - twid_im * y[i + iy].im;
        temp_im = twid_re * y[i + iy].im + twid_im * y[i + iy].re;
        y[i + iy].re = y[i].re - temp_re;
        y[i + iy].im = y[i].im - temp_im;
        y[i].re += temp_re;
        y[i].im += temp_im;
        i += ix;
      }

      istart++;
    }

    ju /= 2;
    iy = ix;
    ix += ix;
    iheight -= iy;
  }

  for (iy = 0; iy < 1024; iy++) {
    y[iy].re *= 0.0009765625;
    y[iy].im *= 0.0009765625;
  }
}

//
// Arguments    : creal_T wwc[767]
// Return Type  : void
//
static void bluestein_setup(creal_T wwc[767])
{
  int idx;
  int rt;
  int k;
  int y;
  double nt_im;
  double nt_re;
  idx = 382;
  rt = 0;
  wwc[383].re = 1.0;
  wwc[383].im = 0.0;
  for (k = 0; k < 383; k++) {
    y = ((k + 1) << 1) - 1;
    if (768 - rt <= y) {
      rt = (y + rt) - 768;
    } else {
      rt += y;
    }

    nt_im = -3.1415926535897931 * (double)rt / 384.0;
    if (nt_im == 0.0) {
      nt_re = 1.0;
      nt_im = 0.0;
    } else {
      nt_re = std::cos(nt_im);
      nt_im = std::sin(nt_im);
    }

    wwc[idx].re = nt_re;
    wwc[idx].im = -nt_im;
    idx--;
  }

  idx = 0;
  for (k = 382; k >= 0; k += -1) {
    wwc[k + 384] = wwc[idx];
    idx++;
  }
}

//
// Arguments    : const double x[384]
//                creal_T y[384]
// Return Type  : void
//
static void fft(const double x[384], creal_T y[384])
{
  creal_T wwc[767];
  int xidx;
  int k;
  static const double costab[513] = { 1.0, 0.99998117528260111,
    0.9999247018391445, 0.9998305817958234, 0.99969881869620425,
    0.99952941750109314, 0.99932238458834954, 0.99907772775264536,
    0.99879545620517241, 0.99847558057329477, 0.99811811290014918,
    0.99772306664419164, 0.99729045667869021, 0.99682029929116567,
    0.996312612182778, 0.99576741446765982, 0.99518472667219693,
    0.99456457073425542, 0.99390697000235606, 0.9932119492347945,
    0.99247953459871, 0.99170975366909953, 0.99090263542778, 0.99005821026229712,
    0.989176509964781, 0.98825756773074946, 0.98730141815785843,
    0.98630809724459867, 0.98527764238894122, 0.984210092386929,
    0.98310548743121629, 0.98196386910955524, 0.98078528040323043,
    0.97956976568544052, 0.97831737071962765, 0.97702814265775439,
    0.97570213003852857, 0.97433938278557586, 0.97293995220556018,
    0.97150389098625178, 0.970031253194544, 0.96852209427441727,
    0.96697647104485207, 0.9653944416976894, 0.96377606579543984,
    0.96212140426904158, 0.96043051941556579, 0.9587034748958716,
    0.95694033573220882, 0.95514116830577078, 0.95330604035419386,
    0.95143502096900834, 0.94952818059303667, 0.94758559101774109,
    0.94560732538052128, 0.94359345816196039, 0.94154406518302081,
    0.93945922360218992, 0.937339011912575, 0.93518350993894761,
    0.932992798834739, 0.93076696107898371, 0.92850608047321559,
    0.92621024213831138, 0.92387953251128674, 0.9215140393420419,
    0.91911385169005777, 0.9166790599210427, 0.91420975570353069,
    0.91170603200542988, 0.90916798309052238, 0.90659570451491533,
    0.90398929312344334, 0.901348847046022, 0.89867446569395382,
    0.89596624975618522, 0.89322430119551532, 0.89044872324475788,
    0.88763962040285393, 0.88479709843093779, 0.881921264348355,
    0.87901222642863353, 0.8760700941954066, 0.87309497841829009,
    0.87008699110871146, 0.86704624551569265, 0.8639728561215867,
    0.86086693863776731, 0.85772861000027212, 0.85455798836540053,
    0.8513551931052652, 0.84812034480329723, 0.84485356524970712,
    0.84155497743689844, 0.83822470555483808, 0.83486287498638,
    0.83146961230254524, 0.8280450452577558, 0.82458930278502529,
    0.82110251499110465, 0.81758481315158371, 0.81403632970594841,
    0.81045719825259477, 0.80684755354379933, 0.80320753148064494,
    0.799537269107905, 0.79583690460888357, 0.79210657730021239,
    0.78834642762660634, 0.78455659715557524, 0.78073722857209449,
    0.77688846567323244, 0.773010453362737, 0.7691033376455797,
    0.765167265622459, 0.76120238548426178, 0.75720884650648457,
    0.75318679904361252, 0.74913639452345937, 0.745057785441466,
    0.74095112535495922, 0.73681656887736979, 0.73265427167241282,
    0.7284643904482252, 0.724247082951467, 0.72000250796138165,
    0.71573082528381859, 0.71143219574521643, 0.70710678118654757,
    0.7027547444572253, 0.69837624940897292, 0.69397146088965389,
    0.68954054473706683, 0.68508366777270036, 0.680600997795453,
    0.67609270357531592, 0.67155895484701833, 0.66699992230363747,
    0.66241577759017178, 0.65780669329707864, 0.65317284295377676,
    0.64851440102211244, 0.64383154288979139, 0.63912444486377573,
    0.63439328416364549, 0.629638238914927, 0.62485948814238634,
    0.6200572117632891, 0.61523159058062682, 0.61038280627630948,
    0.60551104140432555, 0.600616479383869, 0.59569930449243336,
    0.59075970185887416, 0.58579785745643886, 0.58081395809576453,
    0.57580819141784534, 0.57078074588696726, 0.56573181078361312,
    0.560661576197336, 0.55557023301960218, 0.55045797293660481,
    0.54532498842204646, 0.54017147272989285, 0.53499761988709715,
    0.52980362468629461, 0.524589682678469, 0.51935599016558964,
    0.51410274419322166, 0.508830142543107, 0.50353838372571758,
    0.49822766697278181, 0.49289819222978404, 0.487550160148436,
    0.48218377207912272, 0.47679923006332209, 0.47139673682599764,
    0.46597649576796618, 0.46053871095824, 0.45508358712634384,
    0.44961132965460654, 0.4441221445704292, 0.43861623853852766,
    0.43309381885315196, 0.42755509343028208, 0.42200027079979968,
    0.41642956009763715, 0.41084317105790391, 0.40524131400498986,
    0.39962419984564679, 0.3939920400610481, 0.38834504669882625,
    0.38268343236508978, 0.37700741021641826, 0.37131719395183749,
    0.36561299780477385, 0.35989503653498811, 0.35416352542049034,
    0.34841868024943456, 0.34266071731199438, 0.33688985339222005,
    0.33110630575987643, 0.32531029216226293, 0.31950203081601569,
    0.31368174039889152, 0.30784964004153487, 0.30200594931922808,
    0.29615088824362379, 0.29028467725446233, 0.28440753721127188,
    0.27851968938505306, 0.272621355449949, 0.26671275747489837,
    0.26079411791527551, 0.25486565960451457, 0.24892760574572015,
    0.24298017990326387, 0.2370236059943672, 0.23105810828067111,
    0.22508391135979283, 0.2191012401568698, 0.21311031991609136,
    0.20711137619221856, 0.2011046348420919, 0.19509032201612825,
    0.18906866414980619, 0.18303988795514095, 0.17700422041214875,
    0.17096188876030122, 0.16491312048996992, 0.15885814333386145,
    0.15279718525844344, 0.14673047445536175, 0.14065823933284921,
    0.13458070850712617, 0.12849811079379317, 0.1224106751992162,
    0.11631863091190475, 0.11022220729388306, 0.10412163387205459,
    0.0980171403295606, 0.091908956497132724, 0.0857973123444399,
    0.079682437971430126, 0.073564563599667426, 0.067443919563664051,
    0.061320736302208578, 0.055195244349689941, 0.049067674327418015,
    0.04293825693494082, 0.036807222941358832, 0.030674803176636626,
    0.024541228522912288, 0.01840672990580482, 0.012271538285719925,
    0.0061358846491544753, 0.0, -0.0061358846491544753, -0.012271538285719925,
    -0.01840672990580482, -0.024541228522912288, -0.030674803176636626,
    -0.036807222941358832, -0.04293825693494082, -0.049067674327418015,
    -0.055195244349689941, -0.061320736302208578, -0.067443919563664051,
    -0.073564563599667426, -0.079682437971430126, -0.0857973123444399,
    -0.091908956497132724, -0.0980171403295606, -0.10412163387205459,
    -0.11022220729388306, -0.11631863091190475, -0.1224106751992162,
    -0.12849811079379317, -0.13458070850712617, -0.14065823933284921,
    -0.14673047445536175, -0.15279718525844344, -0.15885814333386145,
    -0.16491312048996992, -0.17096188876030122, -0.17700422041214875,
    -0.18303988795514095, -0.18906866414980619, -0.19509032201612825,
    -0.2011046348420919, -0.20711137619221856, -0.21311031991609136,
    -0.2191012401568698, -0.22508391135979283, -0.23105810828067111,
    -0.2370236059943672, -0.24298017990326387, -0.24892760574572015,
    -0.25486565960451457, -0.26079411791527551, -0.26671275747489837,
    -0.272621355449949, -0.27851968938505306, -0.28440753721127188,
    -0.29028467725446233, -0.29615088824362379, -0.30200594931922808,
    -0.30784964004153487, -0.31368174039889152, -0.31950203081601569,
    -0.32531029216226293, -0.33110630575987643, -0.33688985339222005,
    -0.34266071731199438, -0.34841868024943456, -0.35416352542049034,
    -0.35989503653498811, -0.36561299780477385, -0.37131719395183749,
    -0.37700741021641826, -0.38268343236508978, -0.38834504669882625,
    -0.3939920400610481, -0.39962419984564679, -0.40524131400498986,
    -0.41084317105790391, -0.41642956009763715, -0.42200027079979968,
    -0.42755509343028208, -0.43309381885315196, -0.43861623853852766,
    -0.4441221445704292, -0.44961132965460654, -0.45508358712634384,
    -0.46053871095824, -0.46597649576796618, -0.47139673682599764,
    -0.47679923006332209, -0.48218377207912272, -0.487550160148436,
    -0.49289819222978404, -0.49822766697278181, -0.50353838372571758,
    -0.508830142543107, -0.51410274419322166, -0.51935599016558964,
    -0.524589682678469, -0.52980362468629461, -0.53499761988709715,
    -0.54017147272989285, -0.54532498842204646, -0.55045797293660481,
    -0.55557023301960218, -0.560661576197336, -0.56573181078361312,
    -0.57078074588696726, -0.57580819141784534, -0.58081395809576453,
    -0.58579785745643886, -0.59075970185887416, -0.59569930449243336,
    -0.600616479383869, -0.60551104140432555, -0.61038280627630948,
    -0.61523159058062682, -0.6200572117632891, -0.62485948814238634,
    -0.629638238914927, -0.63439328416364549, -0.63912444486377573,
    -0.64383154288979139, -0.64851440102211244, -0.65317284295377676,
    -0.65780669329707864, -0.66241577759017178, -0.66699992230363747,
    -0.67155895484701833, -0.67609270357531592, -0.680600997795453,
    -0.68508366777270036, -0.68954054473706683, -0.69397146088965389,
    -0.69837624940897292, -0.7027547444572253, -0.70710678118654757,
    -0.71143219574521643, -0.71573082528381859, -0.72000250796138165,
    -0.724247082951467, -0.7284643904482252, -0.73265427167241282,
    -0.73681656887736979, -0.74095112535495922, -0.745057785441466,
    -0.74913639452345937, -0.75318679904361252, -0.75720884650648457,
    -0.76120238548426178, -0.765167265622459, -0.7691033376455797,
    -0.773010453362737, -0.77688846567323244, -0.78073722857209449,
    -0.78455659715557524, -0.78834642762660634, -0.79210657730021239,
    -0.79583690460888357, -0.799537269107905, -0.80320753148064494,
    -0.80684755354379933, -0.81045719825259477, -0.81403632970594841,
    -0.81758481315158371, -0.82110251499110465, -0.82458930278502529,
    -0.8280450452577558, -0.83146961230254524, -0.83486287498638,
    -0.83822470555483808, -0.84155497743689844, -0.84485356524970712,
    -0.84812034480329723, -0.8513551931052652, -0.85455798836540053,
    -0.85772861000027212, -0.86086693863776731, -0.8639728561215867,
    -0.86704624551569265, -0.87008699110871146, -0.87309497841829009,
    -0.8760700941954066, -0.87901222642863353, -0.881921264348355,
    -0.88479709843093779, -0.88763962040285393, -0.89044872324475788,
    -0.89322430119551532, -0.89596624975618522, -0.89867446569395382,
    -0.901348847046022, -0.90398929312344334, -0.90659570451491533,
    -0.90916798309052238, -0.91170603200542988, -0.91420975570353069,
    -0.9166790599210427, -0.91911385169005777, -0.9215140393420419,
    -0.92387953251128674, -0.92621024213831138, -0.92850608047321559,
    -0.93076696107898371, -0.932992798834739, -0.93518350993894761,
    -0.937339011912575, -0.93945922360218992, -0.94154406518302081,
    -0.94359345816196039, -0.94560732538052128, -0.94758559101774109,
    -0.94952818059303667, -0.95143502096900834, -0.95330604035419386,
    -0.95514116830577078, -0.95694033573220882, -0.9587034748958716,
    -0.96043051941556579, -0.96212140426904158, -0.96377606579543984,
    -0.9653944416976894, -0.96697647104485207, -0.96852209427441727,
    -0.970031253194544, -0.97150389098625178, -0.97293995220556018,
    -0.97433938278557586, -0.97570213003852857, -0.97702814265775439,
    -0.97831737071962765, -0.97956976568544052, -0.98078528040323043,
    -0.98196386910955524, -0.98310548743121629, -0.984210092386929,
    -0.98527764238894122, -0.98630809724459867, -0.98730141815785843,
    -0.98825756773074946, -0.989176509964781, -0.99005821026229712,
    -0.99090263542778, -0.99170975366909953, -0.99247953459871,
    -0.9932119492347945, -0.99390697000235606, -0.99456457073425542,
    -0.99518472667219693, -0.99576741446765982, -0.996312612182778,
    -0.99682029929116567, -0.99729045667869021, -0.99772306664419164,
    -0.99811811290014918, -0.99847558057329477, -0.99879545620517241,
    -0.99907772775264536, -0.99932238458834954, -0.99952941750109314,
    -0.99969881869620425, -0.9998305817958234, -0.9999247018391445,
    -0.99998117528260111, -1.0 };

  static const double sintab[513] = { 0.0, -0.0061358846491544753,
    -0.012271538285719925, -0.01840672990580482, -0.024541228522912288,
    -0.030674803176636626, -0.036807222941358832, -0.04293825693494082,
    -0.049067674327418015, -0.055195244349689941, -0.061320736302208578,
    -0.067443919563664051, -0.073564563599667426, -0.079682437971430126,
    -0.0857973123444399, -0.091908956497132724, -0.0980171403295606,
    -0.10412163387205459, -0.11022220729388306, -0.11631863091190475,
    -0.1224106751992162, -0.12849811079379317, -0.13458070850712617,
    -0.14065823933284921, -0.14673047445536175, -0.15279718525844344,
    -0.15885814333386145, -0.16491312048996992, -0.17096188876030122,
    -0.17700422041214875, -0.18303988795514095, -0.18906866414980619,
    -0.19509032201612825, -0.2011046348420919, -0.20711137619221856,
    -0.21311031991609136, -0.2191012401568698, -0.22508391135979283,
    -0.23105810828067111, -0.2370236059943672, -0.24298017990326387,
    -0.24892760574572015, -0.25486565960451457, -0.26079411791527551,
    -0.26671275747489837, -0.272621355449949, -0.27851968938505306,
    -0.28440753721127188, -0.29028467725446233, -0.29615088824362379,
    -0.30200594931922808, -0.30784964004153487, -0.31368174039889152,
    -0.31950203081601569, -0.32531029216226293, -0.33110630575987643,
    -0.33688985339222005, -0.34266071731199438, -0.34841868024943456,
    -0.35416352542049034, -0.35989503653498811, -0.36561299780477385,
    -0.37131719395183749, -0.37700741021641826, -0.38268343236508978,
    -0.38834504669882625, -0.3939920400610481, -0.39962419984564679,
    -0.40524131400498986, -0.41084317105790391, -0.41642956009763715,
    -0.42200027079979968, -0.42755509343028208, -0.43309381885315196,
    -0.43861623853852766, -0.4441221445704292, -0.44961132965460654,
    -0.45508358712634384, -0.46053871095824, -0.46597649576796618,
    -0.47139673682599764, -0.47679923006332209, -0.48218377207912272,
    -0.487550160148436, -0.49289819222978404, -0.49822766697278181,
    -0.50353838372571758, -0.508830142543107, -0.51410274419322166,
    -0.51935599016558964, -0.524589682678469, -0.52980362468629461,
    -0.53499761988709715, -0.54017147272989285, -0.54532498842204646,
    -0.55045797293660481, -0.55557023301960218, -0.560661576197336,
    -0.56573181078361312, -0.57078074588696726, -0.57580819141784534,
    -0.58081395809576453, -0.58579785745643886, -0.59075970185887416,
    -0.59569930449243336, -0.600616479383869, -0.60551104140432555,
    -0.61038280627630948, -0.61523159058062682, -0.6200572117632891,
    -0.62485948814238634, -0.629638238914927, -0.63439328416364549,
    -0.63912444486377573, -0.64383154288979139, -0.64851440102211244,
    -0.65317284295377676, -0.65780669329707864, -0.66241577759017178,
    -0.66699992230363747, -0.67155895484701833, -0.67609270357531592,
    -0.680600997795453, -0.68508366777270036, -0.68954054473706683,
    -0.69397146088965389, -0.69837624940897292, -0.7027547444572253,
    -0.70710678118654757, -0.71143219574521643, -0.71573082528381859,
    -0.72000250796138165, -0.724247082951467, -0.7284643904482252,
    -0.73265427167241282, -0.73681656887736979, -0.74095112535495922,
    -0.745057785441466, -0.74913639452345937, -0.75318679904361252,
    -0.75720884650648457, -0.76120238548426178, -0.765167265622459,
    -0.7691033376455797, -0.773010453362737, -0.77688846567323244,
    -0.78073722857209449, -0.78455659715557524, -0.78834642762660634,
    -0.79210657730021239, -0.79583690460888357, -0.799537269107905,
    -0.80320753148064494, -0.80684755354379933, -0.81045719825259477,
    -0.81403632970594841, -0.81758481315158371, -0.82110251499110465,
    -0.82458930278502529, -0.8280450452577558, -0.83146961230254524,
    -0.83486287498638, -0.83822470555483808, -0.84155497743689844,
    -0.84485356524970712, -0.84812034480329723, -0.8513551931052652,
    -0.85455798836540053, -0.85772861000027212, -0.86086693863776731,
    -0.8639728561215867, -0.86704624551569265, -0.87008699110871146,
    -0.87309497841829009, -0.8760700941954066, -0.87901222642863353,
    -0.881921264348355, -0.88479709843093779, -0.88763962040285393,
    -0.89044872324475788, -0.89322430119551532, -0.89596624975618522,
    -0.89867446569395382, -0.901348847046022, -0.90398929312344334,
    -0.90659570451491533, -0.90916798309052238, -0.91170603200542988,
    -0.91420975570353069, -0.9166790599210427, -0.91911385169005777,
    -0.9215140393420419, -0.92387953251128674, -0.92621024213831138,
    -0.92850608047321559, -0.93076696107898371, -0.932992798834739,
    -0.93518350993894761, -0.937339011912575, -0.93945922360218992,
    -0.94154406518302081, -0.94359345816196039, -0.94560732538052128,
    -0.94758559101774109, -0.94952818059303667, -0.95143502096900834,
    -0.95330604035419386, -0.95514116830577078, -0.95694033573220882,
    -0.9587034748958716, -0.96043051941556579, -0.96212140426904158,
    -0.96377606579543984, -0.9653944416976894, -0.96697647104485207,
    -0.96852209427441727, -0.970031253194544, -0.97150389098625178,
    -0.97293995220556018, -0.97433938278557586, -0.97570213003852857,
    -0.97702814265775439, -0.97831737071962765, -0.97956976568544052,
    -0.98078528040323043, -0.98196386910955524, -0.98310548743121629,
    -0.984210092386929, -0.98527764238894122, -0.98630809724459867,
    -0.98730141815785843, -0.98825756773074946, -0.989176509964781,
    -0.99005821026229712, -0.99090263542778, -0.99170975366909953,
    -0.99247953459871, -0.9932119492347945, -0.99390697000235606,
    -0.99456457073425542, -0.99518472667219693, -0.99576741446765982,
    -0.996312612182778, -0.99682029929116567, -0.99729045667869021,
    -0.99772306664419164, -0.99811811290014918, -0.99847558057329477,
    -0.99879545620517241, -0.99907772775264536, -0.99932238458834954,
    -0.99952941750109314, -0.99969881869620425, -0.9998305817958234,
    -0.9999247018391445, -0.99998117528260111, -1.0, -0.99998117528260111,
    -0.9999247018391445, -0.9998305817958234, -0.99969881869620425,
    -0.99952941750109314, -0.99932238458834954, -0.99907772775264536,
    -0.99879545620517241, -0.99847558057329477, -0.99811811290014918,
    -0.99772306664419164, -0.99729045667869021, -0.99682029929116567,
    -0.996312612182778, -0.99576741446765982, -0.99518472667219693,
    -0.99456457073425542, -0.99390697000235606, -0.9932119492347945,
    -0.99247953459871, -0.99170975366909953, -0.99090263542778,
    -0.99005821026229712, -0.989176509964781, -0.98825756773074946,
    -0.98730141815785843, -0.98630809724459867, -0.98527764238894122,
    -0.984210092386929, -0.98310548743121629, -0.98196386910955524,
    -0.98078528040323043, -0.97956976568544052, -0.97831737071962765,
    -0.97702814265775439, -0.97570213003852857, -0.97433938278557586,
    -0.97293995220556018, -0.97150389098625178, -0.970031253194544,
    -0.96852209427441727, -0.96697647104485207, -0.9653944416976894,
    -0.96377606579543984, -0.96212140426904158, -0.96043051941556579,
    -0.9587034748958716, -0.95694033573220882, -0.95514116830577078,
    -0.95330604035419386, -0.95143502096900834, -0.94952818059303667,
    -0.94758559101774109, -0.94560732538052128, -0.94359345816196039,
    -0.94154406518302081, -0.93945922360218992, -0.937339011912575,
    -0.93518350993894761, -0.932992798834739, -0.93076696107898371,
    -0.92850608047321559, -0.92621024213831138, -0.92387953251128674,
    -0.9215140393420419, -0.91911385169005777, -0.9166790599210427,
    -0.91420975570353069, -0.91170603200542988, -0.90916798309052238,
    -0.90659570451491533, -0.90398929312344334, -0.901348847046022,
    -0.89867446569395382, -0.89596624975618522, -0.89322430119551532,
    -0.89044872324475788, -0.88763962040285393, -0.88479709843093779,
    -0.881921264348355, -0.87901222642863353, -0.8760700941954066,
    -0.87309497841829009, -0.87008699110871146, -0.86704624551569265,
    -0.8639728561215867, -0.86086693863776731, -0.85772861000027212,
    -0.85455798836540053, -0.8513551931052652, -0.84812034480329723,
    -0.84485356524970712, -0.84155497743689844, -0.83822470555483808,
    -0.83486287498638, -0.83146961230254524, -0.8280450452577558,
    -0.82458930278502529, -0.82110251499110465, -0.81758481315158371,
    -0.81403632970594841, -0.81045719825259477, -0.80684755354379933,
    -0.80320753148064494, -0.799537269107905, -0.79583690460888357,
    -0.79210657730021239, -0.78834642762660634, -0.78455659715557524,
    -0.78073722857209449, -0.77688846567323244, -0.773010453362737,
    -0.7691033376455797, -0.765167265622459, -0.76120238548426178,
    -0.75720884650648457, -0.75318679904361252, -0.74913639452345937,
    -0.745057785441466, -0.74095112535495922, -0.73681656887736979,
    -0.73265427167241282, -0.7284643904482252, -0.724247082951467,
    -0.72000250796138165, -0.71573082528381859, -0.71143219574521643,
    -0.70710678118654757, -0.7027547444572253, -0.69837624940897292,
    -0.69397146088965389, -0.68954054473706683, -0.68508366777270036,
    -0.680600997795453, -0.67609270357531592, -0.67155895484701833,
    -0.66699992230363747, -0.66241577759017178, -0.65780669329707864,
    -0.65317284295377676, -0.64851440102211244, -0.64383154288979139,
    -0.63912444486377573, -0.63439328416364549, -0.629638238914927,
    -0.62485948814238634, -0.6200572117632891, -0.61523159058062682,
    -0.61038280627630948, -0.60551104140432555, -0.600616479383869,
    -0.59569930449243336, -0.59075970185887416, -0.58579785745643886,
    -0.58081395809576453, -0.57580819141784534, -0.57078074588696726,
    -0.56573181078361312, -0.560661576197336, -0.55557023301960218,
    -0.55045797293660481, -0.54532498842204646, -0.54017147272989285,
    -0.53499761988709715, -0.52980362468629461, -0.524589682678469,
    -0.51935599016558964, -0.51410274419322166, -0.508830142543107,
    -0.50353838372571758, -0.49822766697278181, -0.49289819222978404,
    -0.487550160148436, -0.48218377207912272, -0.47679923006332209,
    -0.47139673682599764, -0.46597649576796618, -0.46053871095824,
    -0.45508358712634384, -0.44961132965460654, -0.4441221445704292,
    -0.43861623853852766, -0.43309381885315196, -0.42755509343028208,
    -0.42200027079979968, -0.41642956009763715, -0.41084317105790391,
    -0.40524131400498986, -0.39962419984564679, -0.3939920400610481,
    -0.38834504669882625, -0.38268343236508978, -0.37700741021641826,
    -0.37131719395183749, -0.36561299780477385, -0.35989503653498811,
    -0.35416352542049034, -0.34841868024943456, -0.34266071731199438,
    -0.33688985339222005, -0.33110630575987643, -0.32531029216226293,
    -0.31950203081601569, -0.31368174039889152, -0.30784964004153487,
    -0.30200594931922808, -0.29615088824362379, -0.29028467725446233,
    -0.28440753721127188, -0.27851968938505306, -0.272621355449949,
    -0.26671275747489837, -0.26079411791527551, -0.25486565960451457,
    -0.24892760574572015, -0.24298017990326387, -0.2370236059943672,
    -0.23105810828067111, -0.22508391135979283, -0.2191012401568698,
    -0.21311031991609136, -0.20711137619221856, -0.2011046348420919,
    -0.19509032201612825, -0.18906866414980619, -0.18303988795514095,
    -0.17700422041214875, -0.17096188876030122, -0.16491312048996992,
    -0.15885814333386145, -0.15279718525844344, -0.14673047445536175,
    -0.14065823933284921, -0.13458070850712617, -0.12849811079379317,
    -0.1224106751992162, -0.11631863091190475, -0.11022220729388306,
    -0.10412163387205459, -0.0980171403295606, -0.091908956497132724,
    -0.0857973123444399, -0.079682437971430126, -0.073564563599667426,
    -0.067443919563664051, -0.061320736302208578, -0.055195244349689941,
    -0.049067674327418015, -0.04293825693494082, -0.036807222941358832,
    -0.030674803176636626, -0.024541228522912288, -0.01840672990580482,
    -0.012271538285719925, -0.0061358846491544753, -0.0 };

  creal_T fy[1024];
  creal_T fv[1024];
  static const double sintabinv[513] = { 0.0, 0.0061358846491544753,
    0.012271538285719925, 0.01840672990580482, 0.024541228522912288,
    0.030674803176636626, 0.036807222941358832, 0.04293825693494082,
    0.049067674327418015, 0.055195244349689941, 0.061320736302208578,
    0.067443919563664051, 0.073564563599667426, 0.079682437971430126,
    0.0857973123444399, 0.091908956497132724, 0.0980171403295606,
    0.10412163387205459, 0.11022220729388306, 0.11631863091190475,
    0.1224106751992162, 0.12849811079379317, 0.13458070850712617,
    0.14065823933284921, 0.14673047445536175, 0.15279718525844344,
    0.15885814333386145, 0.16491312048996992, 0.17096188876030122,
    0.17700422041214875, 0.18303988795514095, 0.18906866414980619,
    0.19509032201612825, 0.2011046348420919, 0.20711137619221856,
    0.21311031991609136, 0.2191012401568698, 0.22508391135979283,
    0.23105810828067111, 0.2370236059943672, 0.24298017990326387,
    0.24892760574572015, 0.25486565960451457, 0.26079411791527551,
    0.26671275747489837, 0.272621355449949, 0.27851968938505306,
    0.28440753721127188, 0.29028467725446233, 0.29615088824362379,
    0.30200594931922808, 0.30784964004153487, 0.31368174039889152,
    0.31950203081601569, 0.32531029216226293, 0.33110630575987643,
    0.33688985339222005, 0.34266071731199438, 0.34841868024943456,
    0.35416352542049034, 0.35989503653498811, 0.36561299780477385,
    0.37131719395183749, 0.37700741021641826, 0.38268343236508978,
    0.38834504669882625, 0.3939920400610481, 0.39962419984564679,
    0.40524131400498986, 0.41084317105790391, 0.41642956009763715,
    0.42200027079979968, 0.42755509343028208, 0.43309381885315196,
    0.43861623853852766, 0.4441221445704292, 0.44961132965460654,
    0.45508358712634384, 0.46053871095824, 0.46597649576796618,
    0.47139673682599764, 0.47679923006332209, 0.48218377207912272,
    0.487550160148436, 0.49289819222978404, 0.49822766697278181,
    0.50353838372571758, 0.508830142543107, 0.51410274419322166,
    0.51935599016558964, 0.524589682678469, 0.52980362468629461,
    0.53499761988709715, 0.54017147272989285, 0.54532498842204646,
    0.55045797293660481, 0.55557023301960218, 0.560661576197336,
    0.56573181078361312, 0.57078074588696726, 0.57580819141784534,
    0.58081395809576453, 0.58579785745643886, 0.59075970185887416,
    0.59569930449243336, 0.600616479383869, 0.60551104140432555,
    0.61038280627630948, 0.61523159058062682, 0.6200572117632891,
    0.62485948814238634, 0.629638238914927, 0.63439328416364549,
    0.63912444486377573, 0.64383154288979139, 0.64851440102211244,
    0.65317284295377676, 0.65780669329707864, 0.66241577759017178,
    0.66699992230363747, 0.67155895484701833, 0.67609270357531592,
    0.680600997795453, 0.68508366777270036, 0.68954054473706683,
    0.69397146088965389, 0.69837624940897292, 0.7027547444572253,
    0.70710678118654757, 0.71143219574521643, 0.71573082528381859,
    0.72000250796138165, 0.724247082951467, 0.7284643904482252,
    0.73265427167241282, 0.73681656887736979, 0.74095112535495922,
    0.745057785441466, 0.74913639452345937, 0.75318679904361252,
    0.75720884650648457, 0.76120238548426178, 0.765167265622459,
    0.7691033376455797, 0.773010453362737, 0.77688846567323244,
    0.78073722857209449, 0.78455659715557524, 0.78834642762660634,
    0.79210657730021239, 0.79583690460888357, 0.799537269107905,
    0.80320753148064494, 0.80684755354379933, 0.81045719825259477,
    0.81403632970594841, 0.81758481315158371, 0.82110251499110465,
    0.82458930278502529, 0.8280450452577558, 0.83146961230254524,
    0.83486287498638, 0.83822470555483808, 0.84155497743689844,
    0.84485356524970712, 0.84812034480329723, 0.8513551931052652,
    0.85455798836540053, 0.85772861000027212, 0.86086693863776731,
    0.8639728561215867, 0.86704624551569265, 0.87008699110871146,
    0.87309497841829009, 0.8760700941954066, 0.87901222642863353,
    0.881921264348355, 0.88479709843093779, 0.88763962040285393,
    0.89044872324475788, 0.89322430119551532, 0.89596624975618522,
    0.89867446569395382, 0.901348847046022, 0.90398929312344334,
    0.90659570451491533, 0.90916798309052238, 0.91170603200542988,
    0.91420975570353069, 0.9166790599210427, 0.91911385169005777,
    0.9215140393420419, 0.92387953251128674, 0.92621024213831138,
    0.92850608047321559, 0.93076696107898371, 0.932992798834739,
    0.93518350993894761, 0.937339011912575, 0.93945922360218992,
    0.94154406518302081, 0.94359345816196039, 0.94560732538052128,
    0.94758559101774109, 0.94952818059303667, 0.95143502096900834,
    0.95330604035419386, 0.95514116830577078, 0.95694033573220882,
    0.9587034748958716, 0.96043051941556579, 0.96212140426904158,
    0.96377606579543984, 0.9653944416976894, 0.96697647104485207,
    0.96852209427441727, 0.970031253194544, 0.97150389098625178,
    0.97293995220556018, 0.97433938278557586, 0.97570213003852857,
    0.97702814265775439, 0.97831737071962765, 0.97956976568544052,
    0.98078528040323043, 0.98196386910955524, 0.98310548743121629,
    0.984210092386929, 0.98527764238894122, 0.98630809724459867,
    0.98730141815785843, 0.98825756773074946, 0.989176509964781,
    0.99005821026229712, 0.99090263542778, 0.99170975366909953, 0.99247953459871,
    0.9932119492347945, 0.99390697000235606, 0.99456457073425542,
    0.99518472667219693, 0.99576741446765982, 0.996312612182778,
    0.99682029929116567, 0.99729045667869021, 0.99772306664419164,
    0.99811811290014918, 0.99847558057329477, 0.99879545620517241,
    0.99907772775264536, 0.99932238458834954, 0.99952941750109314,
    0.99969881869620425, 0.9998305817958234, 0.9999247018391445,
    0.99998117528260111, 1.0, 0.99998117528260111, 0.9999247018391445,
    0.9998305817958234, 0.99969881869620425, 0.99952941750109314,
    0.99932238458834954, 0.99907772775264536, 0.99879545620517241,
    0.99847558057329477, 0.99811811290014918, 0.99772306664419164,
    0.99729045667869021, 0.99682029929116567, 0.996312612182778,
    0.99576741446765982, 0.99518472667219693, 0.99456457073425542,
    0.99390697000235606, 0.9932119492347945, 0.99247953459871,
    0.99170975366909953, 0.99090263542778, 0.99005821026229712,
    0.989176509964781, 0.98825756773074946, 0.98730141815785843,
    0.98630809724459867, 0.98527764238894122, 0.984210092386929,
    0.98310548743121629, 0.98196386910955524, 0.98078528040323043,
    0.97956976568544052, 0.97831737071962765, 0.97702814265775439,
    0.97570213003852857, 0.97433938278557586, 0.97293995220556018,
    0.97150389098625178, 0.970031253194544, 0.96852209427441727,
    0.96697647104485207, 0.9653944416976894, 0.96377606579543984,
    0.96212140426904158, 0.96043051941556579, 0.9587034748958716,
    0.95694033573220882, 0.95514116830577078, 0.95330604035419386,
    0.95143502096900834, 0.94952818059303667, 0.94758559101774109,
    0.94560732538052128, 0.94359345816196039, 0.94154406518302081,
    0.93945922360218992, 0.937339011912575, 0.93518350993894761,
    0.932992798834739, 0.93076696107898371, 0.92850608047321559,
    0.92621024213831138, 0.92387953251128674, 0.9215140393420419,
    0.91911385169005777, 0.9166790599210427, 0.91420975570353069,
    0.91170603200542988, 0.90916798309052238, 0.90659570451491533,
    0.90398929312344334, 0.901348847046022, 0.89867446569395382,
    0.89596624975618522, 0.89322430119551532, 0.89044872324475788,
    0.88763962040285393, 0.88479709843093779, 0.881921264348355,
    0.87901222642863353, 0.8760700941954066, 0.87309497841829009,
    0.87008699110871146, 0.86704624551569265, 0.8639728561215867,
    0.86086693863776731, 0.85772861000027212, 0.85455798836540053,
    0.8513551931052652, 0.84812034480329723, 0.84485356524970712,
    0.84155497743689844, 0.83822470555483808, 0.83486287498638,
    0.83146961230254524, 0.8280450452577558, 0.82458930278502529,
    0.82110251499110465, 0.81758481315158371, 0.81403632970594841,
    0.81045719825259477, 0.80684755354379933, 0.80320753148064494,
    0.799537269107905, 0.79583690460888357, 0.79210657730021239,
    0.78834642762660634, 0.78455659715557524, 0.78073722857209449,
    0.77688846567323244, 0.773010453362737, 0.7691033376455797,
    0.765167265622459, 0.76120238548426178, 0.75720884650648457,
    0.75318679904361252, 0.74913639452345937, 0.745057785441466,
    0.74095112535495922, 0.73681656887736979, 0.73265427167241282,
    0.7284643904482252, 0.724247082951467, 0.72000250796138165,
    0.71573082528381859, 0.71143219574521643, 0.70710678118654757,
    0.7027547444572253, 0.69837624940897292, 0.69397146088965389,
    0.68954054473706683, 0.68508366777270036, 0.680600997795453,
    0.67609270357531592, 0.67155895484701833, 0.66699992230363747,
    0.66241577759017178, 0.65780669329707864, 0.65317284295377676,
    0.64851440102211244, 0.64383154288979139, 0.63912444486377573,
    0.63439328416364549, 0.629638238914927, 0.62485948814238634,
    0.6200572117632891, 0.61523159058062682, 0.61038280627630948,
    0.60551104140432555, 0.600616479383869, 0.59569930449243336,
    0.59075970185887416, 0.58579785745643886, 0.58081395809576453,
    0.57580819141784534, 0.57078074588696726, 0.56573181078361312,
    0.560661576197336, 0.55557023301960218, 0.55045797293660481,
    0.54532498842204646, 0.54017147272989285, 0.53499761988709715,
    0.52980362468629461, 0.524589682678469, 0.51935599016558964,
    0.51410274419322166, 0.508830142543107, 0.50353838372571758,
    0.49822766697278181, 0.49289819222978404, 0.487550160148436,
    0.48218377207912272, 0.47679923006332209, 0.47139673682599764,
    0.46597649576796618, 0.46053871095824, 0.45508358712634384,
    0.44961132965460654, 0.4441221445704292, 0.43861623853852766,
    0.43309381885315196, 0.42755509343028208, 0.42200027079979968,
    0.41642956009763715, 0.41084317105790391, 0.40524131400498986,
    0.39962419984564679, 0.3939920400610481, 0.38834504669882625,
    0.38268343236508978, 0.37700741021641826, 0.37131719395183749,
    0.36561299780477385, 0.35989503653498811, 0.35416352542049034,
    0.34841868024943456, 0.34266071731199438, 0.33688985339222005,
    0.33110630575987643, 0.32531029216226293, 0.31950203081601569,
    0.31368174039889152, 0.30784964004153487, 0.30200594931922808,
    0.29615088824362379, 0.29028467725446233, 0.28440753721127188,
    0.27851968938505306, 0.272621355449949, 0.26671275747489837,
    0.26079411791527551, 0.25486565960451457, 0.24892760574572015,
    0.24298017990326387, 0.2370236059943672, 0.23105810828067111,
    0.22508391135979283, 0.2191012401568698, 0.21311031991609136,
    0.20711137619221856, 0.2011046348420919, 0.19509032201612825,
    0.18906866414980619, 0.18303988795514095, 0.17700422041214875,
    0.17096188876030122, 0.16491312048996992, 0.15885814333386145,
    0.15279718525844344, 0.14673047445536175, 0.14065823933284921,
    0.13458070850712617, 0.12849811079379317, 0.1224106751992162,
    0.11631863091190475, 0.11022220729388306, 0.10412163387205459,
    0.0980171403295606, 0.091908956497132724, 0.0857973123444399,
    0.079682437971430126, 0.073564563599667426, 0.067443919563664051,
    0.061320736302208578, 0.055195244349689941, 0.049067674327418015,
    0.04293825693494082, 0.036807222941358832, 0.030674803176636626,
    0.024541228522912288, 0.01840672990580482, 0.012271538285719925,
    0.0061358846491544753, 0.0 };

  double fy_re;
  bluestein_setup(wwc);
  xidx = 0;
  for (k = 0; k < 384; k++) {
    y[k].re = wwc[k + 383].re * x[xidx];
    y[k].im = wwc[k + 383].im * -x[xidx];
    xidx++;
  }

  r2br_r2dit_trig_impl(y, 0, costab, sintab, fy);
  r2br_r2dit_trig(wwc, costab, sintab, fv);
  for (xidx = 0; xidx < 1024; xidx++) {
    fy_re = fy[xidx].re;
    fy[xidx].re = fy[xidx].re * fv[xidx].re - fy[xidx].im * fv[xidx].im;
    fy[xidx].im = fy_re * fv[xidx].im + fy[xidx].im * fv[xidx].re;
  }

  b_r2br_r2dit_trig(fy, costab, sintabinv, fv);
  xidx = 0;
  for (k = 0; k < 384; k++) {
    y[xidx].re = wwc[k + 383].re * fv[k + 383].re + wwc[k + 383].im * fv[k + 383]
      .im;
    y[xidx].im = wwc[k + 383].re * fv[k + 383].im - wwc[k + 383].im * fv[k + 383]
      .re;
    xidx++;
  }
}

//
// Arguments    : double b[4]
//                double a[4]
//                const double x[402]
//                const double zi[3]
//                double y[402]
// Return Type  : void
//
static void filter(double b[4], double a[4], const double x[402], const double
                   zi[3], double y[402])
{
  double a1;
  int k;
  int naxpy;
  int j;
  a1 = a[0];
  if ((!rtIsInf(a[0])) && (!rtIsNaN(a[0])) && (!(a[0] == 0.0)) && (a[0] != 1.0))
  {
    for (k = 0; k < 4; k++) {
      b[k] /= a1;
    }

    for (k = 0; k < 3; k++) {
      a[k + 1] /= a1;
    }

    a[0] = 1.0;
  }

  for (k = 0; k < 3; k++) {
    y[k] = zi[k];
  }

  memset(&y[3], 0, 399U * sizeof(double));
  for (k = 0; k < 402; k++) {
    naxpy = 402 - k;
    if (!(naxpy < 4)) {
      naxpy = 4;
    }

    for (j = 0; j + 1 <= naxpy; j++) {
      y[k + j] += x[k] * b[j];
    }

    naxpy = 401 - k;
    if (!(naxpy < 3)) {
      naxpy = 3;
    }

    a1 = -y[k];
    for (j = 1; j <= naxpy; j++) {
      y[k + j] += a1 * a[j];
    }
  }
}

//
// Arguments    : const double x_in[384]
//                double y_out[384]
// Return Type  : void
//
static void filtfilt(const double x_in[384], double y_out[384])
{
  double xtmp;
  double d0;
  int i;
  double y[402];
  double dv3[4];
  static const double dv4[4] = { 0.90431873448479, -2.71295620345437,
    2.71295620345437, -0.90431873448479 };

  double dv5[4];
  static const double dv6[4] = { 1.0, -2.7990220146733, 2.61773550092223,
    -0.81779236028278 };

  double b_y[402];
  double a[3];
  static const double b_a[3] = { -0.90431873448438438, 1.80863746896885,
    -0.90431873448445832 };

  xtmp = 2.0 * x_in[0];
  d0 = 2.0 * x_in[383];
  for (i = 0; i < 9; i++) {
    y[i] = xtmp - x_in[9 - i];
  }

  memcpy(&y[9], &x_in[0], 384U * sizeof(double));
  for (i = 0; i < 9; i++) {
    y[i + 393] = d0 - x_in[382 - i];
  }

  for (i = 0; i < 4; i++) {
    dv3[i] = dv4[i];
    dv5[i] = dv6[i];
  }

  for (i = 0; i < 3; i++) {
    a[i] = b_a[i] * y[0];
  }

  memcpy(&b_y[0], &y[0], 402U * sizeof(double));
  filter(dv3, dv5, b_y, a, y);
  for (i = 0; i < 201; i++) {
    xtmp = y[i];
    y[i] = y[401 - i];
    y[401 - i] = xtmp;
  }

  for (i = 0; i < 4; i++) {
    dv3[i] = dv4[i];
    dv5[i] = dv6[i];
  }

  for (i = 0; i < 3; i++) {
    a[i] = b_a[i] * y[0];
  }

  memcpy(&b_y[0], &y[0], 402U * sizeof(double));
  filter(dv3, dv5, b_y, a, y);
  for (i = 0; i < 201; i++) {
    xtmp = y[i];
    y[i] = y[401 - i];
    y[401 - i] = xtmp;
  }

  memcpy(&y_out[0], &y[9], 384U * sizeof(double));
}

//
// Arguments    : const double x[384]
// Return Type  : double
//
static double mean(const double x[384])
{
  double y;
  int k;
  y = x[0];
  for (k = 0; k < 383; k++) {
    y += x[k + 1];
  }

  y /= 384.0;
  return y;
}

//
// Arguments    : const double a[384]
//                double y[384]
// Return Type  : void
//
static void power(const double a[384], double y[384])
{
  int k;
  for (k = 0; k < 384; k++) {
    y[k] = a[k] * a[k];
  }
}

//
// Arguments    : const creal_T x[767]
//                const double costab[513]
//                const double sintab[513]
//                creal_T y[1024]
// Return Type  : void
//
static void r2br_r2dit_trig(const creal_T x[767], const double costab[513],
  const double sintab[513], creal_T y[1024])
{
  int i;
  int ix;
  int ju;
  int iy;
  boolean_T tst;
  double temp_re;
  double temp_im;
  int iheight;
  int istart;
  int j;
  double twid_re;
  double twid_im;
  int ihi;
  for (i = 0; i < 1024; i++) {
    y[i].re = 0.0;
    y[i].im = 0.0;
  }

  ix = 0;
  ju = 0;
  iy = 0;
  for (i = 0; i < 766; i++) {
    y[iy] = x[ix];
    iy = 1024;
    tst = true;
    while (tst) {
      iy >>= 1;
      ju ^= iy;
      tst = ((ju & iy) == 0);
    }

    iy = ju;
    ix++;
  }

  y[iy] = x[ix];
  for (i = 0; i <= 1023; i += 2) {
    temp_re = y[i + 1].re;
    temp_im = y[i + 1].im;
    y[i + 1].re = y[i].re - y[i + 1].re;
    y[i + 1].im = y[i].im - y[i + 1].im;
    y[i].re += temp_re;
    y[i].im += temp_im;
  }

  iy = 2;
  ix = 4;
  ju = 256;
  iheight = 1021;
  while (ju > 0) {
    for (i = 0; i < iheight; i += ix) {
      temp_re = y[i + iy].re;
      temp_im = y[i + iy].im;
      y[i + iy].re = y[i].re - temp_re;
      y[i + iy].im = y[i].im - temp_im;
      y[i].re += temp_re;
      y[i].im += temp_im;
    }

    istart = 1;
    for (j = ju; j < 512; j += ju) {
      twid_re = costab[j];
      twid_im = sintab[j];
      i = istart;
      ihi = istart + iheight;
      while (i < ihi) {
        temp_re = twid_re * y[i + iy].re - twid_im * y[i + iy].im;
        temp_im = twid_re * y[i + iy].im + twid_im * y[i + iy].re;
        y[i + iy].re = y[i].re - temp_re;
        y[i + iy].im = y[i].im - temp_im;
        y[i].re += temp_re;
        y[i].im += temp_im;
        i += ix;
      }

      istart++;
    }

    ju /= 2;
    iy = ix;
    ix += ix;
    iheight -= iy;
  }
}

//
// Arguments    : const creal_T x[384]
//                int xoffInit
//                const double costab[513]
//                const double sintab[513]
//                creal_T y[1024]
// Return Type  : void
//
static void r2br_r2dit_trig_impl(const creal_T x[384], int xoffInit, const
  double costab[513], const double sintab[513], creal_T y[1024])
{
  int i;
  int ix;
  int ju;
  int iy;
  boolean_T tst;
  double temp_re;
  double temp_im;
  int iheight;
  int istart;
  int j;
  double twid_re;
  double twid_im;
  int ihi;
  for (i = 0; i < 1024; i++) {
    y[i].re = 0.0;
    y[i].im = 0.0;
  }

  ix = xoffInit;
  ju = 0;
  iy = 0;
  for (i = 0; i < 383; i++) {
    y[iy] = x[ix];
    iy = 1024;
    tst = true;
    while (tst) {
      iy >>= 1;
      ju ^= iy;
      tst = ((ju & iy) == 0);
    }

    iy = ju;
    ix++;
  }

  y[iy] = x[ix];
  for (i = 0; i <= 1023; i += 2) {
    temp_re = y[i + 1].re;
    temp_im = y[i + 1].im;
    y[i + 1].re = y[i].re - y[i + 1].re;
    y[i + 1].im = y[i].im - y[i + 1].im;
    y[i].re += temp_re;
    y[i].im += temp_im;
  }

  iy = 2;
  ix = 4;
  ju = 256;
  iheight = 1021;
  while (ju > 0) {
    for (i = 0; i < iheight; i += ix) {
      temp_re = y[i + iy].re;
      temp_im = y[i + iy].im;
      y[i + iy].re = y[i].re - temp_re;
      y[i + iy].im = y[i].im - temp_im;
      y[i].re += temp_re;
      y[i].im += temp_im;
    }

    istart = 1;
    for (j = ju; j < 512; j += ju) {
      twid_re = costab[j];
      twid_im = sintab[j];
      i = istart;
      ihi = istart + iheight;
      while (i < ihi) {
        temp_re = twid_re * y[i + iy].re - twid_im * y[i + iy].im;
        temp_im = twid_re * y[i + iy].im + twid_im * y[i + iy].re;
        y[i + iy].re = y[i].re - temp_re;
        y[i + iy].im = y[i].im - temp_im;
        y[i].re += temp_re;
        y[i].im += temp_im;
        i += ix;
      }

      istart++;
    }

    ju /= 2;
    iy = ix;
    ix += ix;
    iheight -= iy;
  }
}

//
// Arguments    : const double a[384]
//                double b[384]
// Return Type  : void
//
static void repmat(const double a[384], double b[384])
{
  memcpy(&b[0], &a[0], 384U * sizeof(double));
}

//
// Arguments    : const double X[192]
//                double Y[192]
// Return Type  : void
//
static void rescale_minmax(const double X[192], double Y[192])
{
  int ixstart;
  double mtmp;
  int ix;
  boolean_T exitg1;
  double b_mtmp;
  ixstart = 1;
  mtmp = X[0];
  if (rtIsNaN(X[0])) {
    ix = 2;
    exitg1 = false;
    while ((!exitg1) && (ix < 193)) {
      ixstart = ix;
      if (!rtIsNaN(X[ix - 1])) {
        mtmp = X[ix - 1];
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }

  if (ixstart < 192) {
    while (ixstart + 1 < 193) {
      if (X[ixstart] < mtmp) {
        mtmp = X[ixstart];
      }

      ixstart++;
    }
  }

  ixstart = 1;
  b_mtmp = X[0];
  if (rtIsNaN(X[0])) {
    ix = 2;
    exitg1 = false;
    while ((!exitg1) && (ix < 193)) {
      ixstart = ix;
      if (!rtIsNaN(X[ix - 1])) {
        b_mtmp = X[ix - 1];
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }

  if (ixstart < 192) {
    while (ixstart + 1 < 193) {
      if (X[ixstart] > b_mtmp) {
        b_mtmp = X[ixstart];
      }

      ixstart++;
    }
  }

  b_mtmp -= mtmp;
  for (ixstart = 0; ixstart < 192; ixstart++) {
    Y[ixstart] = (X[ixstart] - mtmp) / b_mtmp;
  }
}

//
// Arguments    : const double x[384]
// Return Type  : double
//
static double sum(const double x[384])
{
  double y;
  int k;
  y = x[0];
  for (k = 0; k < 383; k++) {
    y += x[k + 1];
  }

  return y;
}

//
// if size(signals,2) > size(signals,1)
//      signals = signals.';
//  end
// Arguments    : const double signals[384]
//                double fs
//                const double window[384]
//                double CSM[192]
// Return Type  : void
//
static void tf_welch_psd(const double signals[384], double fs, const double
  window[384], double CSM[192])
{
  double data_taper[384];
  double a;
  int i;
  double b_signals[384];
  creal_T Data_Block[384];
  double dv7[384];

  //  Function for spectra estimation by Welch's method
  //  Developed by Luiz A. Baccala, Fl?vio Caduda and Luciano Caldas, all from
  //  Escola Polit?cnica - Poli-USP, with cooperation of Carlos Pagani and Felipe 
  //  Amaral from Escola de Engenharia de S?o Carlos - EESC-USP.
  //
  //  Cross-spectra matrix are estimated by Welch's method with 50% overlap and
  //  the window energy loss are compasated by a factor of 1/sum(Wi.^2) where
  //  Wi are the elements of the window [1]. Then, the spectra becomes:
  //  Sxy = fft(x)*conj(fft(y))/sum(Wi.^2)
  //
  //  Code was tested with a known- spectra signal from a white noise filtered
  //  by a filter. The variance (power) of the signal checks with the integral
  //  of the PSD estimated.
  //
  //  INPUT:
  //  -- signals: matrix of signals to perform the spectra estimatino. Size is
  //  [Samples x number of sensors];
  //  -- fs: samplerate in Hertz;
  //  -- window: data taper desired. Must be a vector. For best performance it
  //  should be a power of 2. For general applications do: window=hanning(1024); 
  //
  //  OUTPUT:
  //  -- CSM: Cross Spectral Matrix: Unilateral (0:fs/2) spectra. Welch's
  //  method is used with 50% overlap. Matrix size: sensors x sensors x
  //  windowsize/2
  //  -- frequencies: vector with all frequencies corresponding to each layer
  //  (3rd layer in depth) of CSM.
  //
  //  LAST REVISION: Aug - 18 - 2016
  //  ADDED 'fs' missing term in line 82, for calibration factor
  //  [1] Trobs,M.; Heinzel,G. "Improved spectrum estimation from digitized
  //  time series on a logarithmic frequency axis"
  //  doi:10.1016/j.measurement.2005.10.010
  //  frequencies = (0:(windowsize/2-1))*fs/windowsize;
  // must be even, best if 2^n
  // ORIGINAL;
  repmat(window, data_taper);

  //  Data segmentation into blocks of size block_samples:
  // ORIGINAL
  //  S = zeros(ceil(block_samples/2),number_of_signals.^2);
  //  Retrieve current data block
  a = mean(signals);

  // Taper it
  for (i = 0; i < 384; i++) {
    b_signals[i] = (signals[i] - a) * data_taper[i];
  }

  fft(b_signals, Data_Block);

  // FFT it,
  //  bilateral DFT
  //  viii
  // ORIGINAL
  //  Data_Block = Data_Block(1:ceil(block_samples/2),:);
  // All spectral combinations:
  // ORIGINAL
  //  P = zeros(ceil(block_samples/2)/2,number_of_signals.^2);
  //  THIS IS FOR WIND TUNNEL EESC-USP BEAMFORMING CODE
  //              P(:,c) = real(Data_Block(:,b).*conj(Data_Block(:,aa)));
  //  P(:,c) = Data_Block(:,b).*conj(Data_Block(:,aa));
  //  IS FOR FAN RIG BEAMFORMING CODE
  //  P(:,c) = Data_Block(:,aa).*conj(Data_Block(:,b)); % THIS IS THE ORIGINAL LINE 
  //  Sum the spectrums up ...
  power(window, dv7);
  a = sum(dv7) * fs;

  //  Average them out
  //  for a = 1:sensors
  for (i = 0; i < 192; i++) {
    CSM[i] = (Data_Block[i].re * Data_Block[i].re - Data_Block[i].im *
              -Data_Block[i].im) * 2.0 / a;
  }

  //  end
  //  clear S
  CSM[0] = (CSM[0] + CSM[0]) - CSM[0];
}

//
// tf_psd_rescale_w256 TF Preprocessing
//  input should be X = (384, 2), or X = (768, 1);
//  Output is Y = (2, 192) float32
//  X = single(X);
// Arguments    : double X[768]
//                float Y[384]
// Return Type  : void
//
void tf_psd_rescale_w384(double X[768], float Y[384])
{
  double b_X[384];
  static const double dv0[384] = { 0.0, 6.7281003023278441E-5,
    0.00026910590515966115, 0.0006054203904817812, 0.0010761339486859423,
    0.0016811198994508558, 0.0024202154265302034, 0.0032932216215704191,
    0.0042999035376417027, 0.0054399902524678856, 0.0067131749413381625,
    0.0081191149596808732, 0.0096574319352776272, 0.011327711870091961,
    0.013129505251686602, 0.015062327174197643, 0.01712565746883471,
    0.019318940843870591, 0.021641587034083754, 0.024092970959612825,
    0.026672432894180531, 0.029379278642642115, 0.032212779727809504,
    0.035172173586502431, 0.038256663774772381, 0.041465420182244472,
    0.044797579255520581, 0.048252244230581942, 0.051828485374130095,
    0.05552534023380018, 0.05934181389718024, 0.063276879259566043,
    0.067329477300379359, 0.071498517368176029, 0.075782877474166455,
    0.080181404594169559, 0.084692914978919676, 0.08931619447264133,
    0.094049998839808191, 0.098893054099996547, 0.10384405687074388,
    0.10890167471832074, 0.11406454651632031, 0.11933128281197042,
    0.12470046620006842, 0.13017065170443948, 0.13574036716681359,
    0.14140811364301936, 0.14717236580638554, 0.15303157235824316,
    0.15898415644541752, 0.16502851608459657, 0.17116302459346378,
    0.17738603102847689, 0.18369586062917687, 0.19009081526890609,
    0.19656917391181461, 0.20312919307603278, 0.20976910730288362,
    0.21648712963201044, 0.22328145208229078, 0.23015024613840734,
    0.23709166324294545, 0.24410383529388435, 0.25118487514734822,
    0.25833287712548192, 0.26554591752931467, 0.2728220551564734,
    0.28015933182360764, 0.28755577289338269, 0.29500938780590258,
    0.30251817061441777, 0.31008010052517265, 0.31769314244125046,
    0.32535524751026662, 0.33306435367576381, 0.34081838623216115,
    0.34861525838310714, 0.35645287180308677, 0.36432911720213129,
    0.37224187489347837, 0.38018901536403177, 0.38816839984746321,
    0.39617788089980654, 0.40421530297738612, 0.41227850301692548,
    0.42036531101767977, 0.4284735506254348, 0.43660103971821612,
    0.44474559099355138, 0.45290501255712395, 0.46107710851266676,
    0.46925967955292885, 0.4774505235515627, 0.48564743615576911,
    0.49384821137954094, 0.50205064219734785, 0.51025252113809927,
    0.5184516408792279, 0.52664579484073359, 0.53483277777902616,
    0.54301038638041044, 0.55117641985405041, 0.55932868052425477,
    0.56746497442192423, 0.57558311187500155, 0.58368090809776452,
    0.59175618377880457, 0.59980676566753155, 0.6078304871590483,
    0.61582518887723481, 0.6237887192558893, 0.63171893511776567,
    0.6396137022513545, 0.64747089598525021, 0.65528840175995162,
    0.66306411569693968, 0.67079594516488306, 0.67848180934281421,
    0.68611963978012946, 0.6937073809532579, 0.70124299081885211,
    0.70872444136335144, 0.71614971914876913, 0.72351682585455679,
    0.73082377881540006, 0.73806861155480219, 0.74524937431430927,
    0.75236413457823725, 0.75941097759375942, 0.76638800688621034,
    0.77329334476947476, 0.78012513285131635, 0.78688153253351678,
    0.79356072550668633, 0.80016091423961466, 0.80668032246302945,
    0.81311719564763263, 0.819469801476288, 0.82573643031022737,
    0.83191539564915673, 0.83800503458513353, 0.84400370825009519,
    0.84990980225691748, 0.855721727133886, 0.86143791875245912,
    0.86705683874821515, 0.87257697493486119, 0.87799684171119907,
    0.88331498046093715, 0.88852995994523809, 0.8936403766879002,
    0.89864485535306637, 0.90354204911535951, 0.90833064002234631,
    0.91300933934923, 0.91757688794567582, 0.92203205657468046,
    0.9263736462433878, 0.93060048852576727, 0.93471144587706556,
    0.9387054119399465, 0.94258131184223914, 0.94633810248621142,
    0.94997477282929244, 0.95349034415616918, 0.95688387034218092,
    0.96015443810794565, 0.96330116726514425, 0.966323210953401,
    0.96921975586819387, 0.971990022479734, 0.97463326524275651,
    0.977148772797164, 0.979535868159471, 0.9817939089049964,
    0.98392228734075515, 0.9859204306690037, 0.98778780114139231,
    0.98952389620368775, 0.99112824863102134, 0.99260042665363124,
    0.99394003407306108, 0.99514671036878788, 0.99622013079524552,
    0.99716000646922209, 0.99796608444760548, 0.998638147795456,
    0.99917601564438918, 0.99957954324125131, 0.9998486219870768,
    0.99998317946631388, 0.99998317946631388, 0.9998486219870768,
    0.99957954324125131, 0.99917601564438918, 0.998638147795456,
    0.99796608444760548, 0.99716000646922209, 0.99622013079524552,
    0.99514671036878788, 0.99394003407306108, 0.99260042665363124,
    0.99112824863102134, 0.98952389620368786, 0.98778780114139231,
    0.9859204306690037, 0.98392228734075537, 0.9817939089049964,
    0.979535868159471, 0.977148772797164, 0.97463326524275651, 0.971990022479734,
    0.96921975586819387, 0.966323210953401, 0.96330116726514436,
    0.96015443810794576, 0.956883870342181, 0.95349034415616929,
    0.94997477282929255, 0.94633810248621142, 0.94258131184223926,
    0.9387054119399465, 0.93471144587706556, 0.93060048852576749,
    0.926373646243388, 0.92203205657468057, 0.917576887945676, 0.91300933934923,
    0.90833064002234654, 0.9035420491153594, 0.89864485535306637,
    0.8936403766879002, 0.8885299599452382, 0.88331498046093715,
    0.87799684171119918, 0.8725769749348613, 0.86705683874821537,
    0.86143791875245934, 0.855721727133886, 0.84990980225691781,
    0.84400370825009507, 0.83800503458513365, 0.83191539564915673,
    0.82573643031022748, 0.819469801476288, 0.813117195647633,
    0.80668032246302945, 0.80016091423961488, 0.79356072550668644,
    0.786881532533517, 0.78012513285131613, 0.77329334476947476,
    0.76638800688621045, 0.75941097759375942, 0.75236413457823759,
    0.74524937431430938, 0.7380686115548023, 0.73082377881540017,
    0.72351682585455712, 0.71614971914876946, 0.70872444136335155,
    0.70124299081885211, 0.6937073809532579, 0.68611963978012946,
    0.67848180934281443, 0.67079594516488306, 0.66306411569693957,
    0.65528840175995184, 0.64747089598525043, 0.63961370225135461,
    0.63171893511776611, 0.62378871925588919, 0.6158251888772347,
    0.60783048715904853, 0.59980676566753166, 0.59175618377880446,
    0.58368090809776474, 0.57558311187500166, 0.56746497442192434,
    0.55932868052425522, 0.55117641985405075, 0.54301038638041066,
    0.53483277777902627, 0.52664579484073348, 0.5184516408792279,
    0.51025252113809949, 0.502050642197348, 0.49384821137954094,
    0.485647436155769, 0.47745052355156309, 0.46925967955292908,
    0.46107710851266687, 0.4529050125571244, 0.44474559099355115,
    0.43660103971821645, 0.42847355062543491, 0.42036531101767982,
    0.41227850301692537, 0.40421530297738634, 0.39617788089980666,
    0.38816839984746332, 0.38018901536403216, 0.37224187489347871,
    0.3643291172021314, 0.35645287180308688, 0.34861525838310714,
    0.34081838623216104, 0.33306435367576404, 0.32535524751026673,
    0.31769314244125046, 0.310080100525173, 0.302518170614418,
    0.2950093878059028, 0.28755577289338274, 0.28015933182360758,
    0.27282205515647329, 0.26554591752931478, 0.25833287712548203,
    0.25118487514734827, 0.24410383529388469, 0.23709166324294567,
    0.23015024613840745, 0.22328145208229083, 0.21648712963201078,
    0.20976910730288384, 0.20312919307603289, 0.19656917391181467,
    0.19009081526890642, 0.18369586062917681, 0.177386031028477,
    0.17116302459346378, 0.16502851608459657, 0.1589841564454178,
    0.15303157235824305, 0.1471723658063856, 0.14140811364301936,
    0.13574036716681387, 0.13017065170443937, 0.12470046620006858,
    0.11933128281197047, 0.11406454651632059, 0.10890167471832096,
    0.10384405687074377, 0.0988930540999966, 0.094049998839808246,
    0.089316194472641552, 0.084692914978919565, 0.08018140459416967,
    0.075782877474166455, 0.0714985173681762, 0.067329477300379525,
    0.063276879259566376, 0.059341813897180296, 0.05552534023380018,
    0.051828485374130207, 0.048252244230581831, 0.044797579255520636,
    0.041465420182244472, 0.038256663774772492, 0.035172173586502542,
    0.032212779727809726, 0.029379278642642115, 0.026672432894180531,
    0.02409297095961288, 0.021641587034083642, 0.019318940843870591,
    0.01712565746883471, 0.015062327174197698, 0.013129505251686657,
    0.011327711870092017, 0.0096574319352776272, 0.0081191149596809287,
    0.0067131749413381625, 0.00543999025246783, 0.0042999035376417027,
    0.0032932216215704191, 0.0024202154265302589, 0.0016811198994508558,
    0.0010761339486859423, 0.0006054203904817812, 0.00026910590515966115,
    6.7281003023278441E-5, 0.0 };

  double dv1[192];
  double dv2[192];
  int i0;

  //  High Pass Filter at 4Hz:
  memcpy(&b_X[0], &X[0], 384U * sizeof(double));
  filtfilt(b_X, *(double (*)[384])&X[0]);
  memcpy(&b_X[0], &X[384], 384U * sizeof(double));
  filtfilt(b_X, *(double (*)[384])&X[384]);
  tf_welch_psd(*(double (*)[384])&X[0], 250.0, dv0, dv1);
  rescale_minmax(dv1, dv2);
  for (i0 = 0; i0 < 192; i0++) {
    Y[i0] = (float)dv2[i0];
  }

  tf_welch_psd(*(double (*)[384])&X[384], 250.0, dv0, dv1);
  rescale_minmax(dv1, dv2);
  for (i0 = 0; i0 < 192; i0++) {
    Y[192 + i0] = (float)dv2[i0];
  }

  //  for ch = 1:2
  //     Y(ch,:) = tf_welch_psd(X(:,ch), 250, hannWin(384)); %
  //     Y(ch,:) = rescale_minmax(Y(ch,:));
  //  end
}

//
// Arguments    : void
// Return Type  : void
//
void tf_psd_rescale_w384_initialize()
{
  rt_InitInfAndNaN(8U);
}

//
// Arguments    : void
// Return Type  : void
//
void tf_psd_rescale_w384_terminate()
{
  // (no terminate code required)
}

//
// File trailer for tf_psd_rescale_w384.cpp
//
// [EOF]
//
